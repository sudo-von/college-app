definitions:
  presenter.ClassroomResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  presenter.TinyUniversityList:
    properties:
      results:
        items:
          $ref: '#/definitions/presenter.TinyUniversityResponse'
        type: array
      total:
        type: integer
    type: object
  presenter.TinyUniversityResponse:
    properties:
      id:
        type: string
      name:
        type: string
      profile_picture:
        type: string
    type: object
  presenter.TinyUserResponse:
    properties:
      birth_date:
        example: "1997-04-17"
        type: string
      email:
        example: sudo.von.contact@gmail.com
        type: string
      id:
        example: 613aab4d8a6ef50007e622bd
        type: string
      name:
        example: Sudo Von
        type: string
      registration_number:
        example: "16190770"
        type: string
    type: object
  presenter.UniversityResponse:
    properties:
      classrooms:
        items:
          $ref: '#/definitions/presenter.ClassroomResponse'
        type: array
      id:
        type: string
      name:
        type: string
      profile_picture:
        type: string
    type: object
  presenter.UpdateUserPayload:
    properties:
      birth_date:
        example: "1997-04-17"
        type: string
      email:
        example: sudo.von.contact@gmail.com
        type: string
      name:
        example: Sudo Von
        type: string
      registration_number:
        example: "16190770"
        type: string
    type: object
  presenter.UserMoodPayload:
    properties:
      mood:
        example: 5
        type: number
    type: object
  presenter.UserMoodResponse:
    properties:
      creation_date:
        example: "2021-04-17"
        type: string
      id:
        example: 613aab578a6ef50007e622be
        type: string
      mood:
        example: 10
        type: number
      user_id:
        example: 613aab4d8a6ef50007e622bd
        type: string
    type: object
  presenter.UserPayload:
    properties:
      birth_date:
        example: "1997-04-17"
        type: string
      email:
        example: sudo.von.contact@gmail.com
        type: string
      name:
        example: Sudo Von
        type: string
      password:
        example: "123456"
        type: string
      registration_number:
        example: "16190770"
        type: string
      university_id:
        example: 61366c06d3f6379af212aeb5
        type: string
    type: object
info:
  contact:
    email: sudo.von.contact@gmail.com
    name: Jesús 'VoN' Rodríguez
    url: https://www.linkedin.com/in/jes%C3%BAs-%C3%A1ngel-rodr%C3%ADguez-mart%C3%ADnez-84991a1b4/
  description: Official documentation to consume the API.
  title: College-app API
  version: 1.0.0
paths:
  /contacts/{id}:
    patch:
      description: Update contact given its ID.
      operationId: update-contact-by-id
      responses:
        "200":
          description: ""
      security:
      - BearerJWT: []
      summary: Update contact.
      tags:
      - contacts
  /contacts/users/{id}:
    get:
      description: Show contact given the user ID.
      operationId: show-contact-by-user-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: json
      security:
      - BearerJWT: []
      summary: Show contact by user ID.
      tags:
      - contacts
    post:
      description: Create contact for a specific user given its ID.
      operationId: create-contact-by-user-id
      responses:
        "201":
          description: ""
      security:
      - BearerJWT: []
      summary: Create contact.
      tags:
      - contacts
  /suggestions:
    post:
      description: Create suggestion.
      operationId: create-suggestion
      produces:
      - application/json
      responses:
        "201":
          description: ""
      security:
      - BearerJWT: []
      summary: Create suggestion.
      tags:
      - suggestions
  /universities:
    get:
      description: List basic universities information.
      operationId: list-universities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.TinyUniversityList'
      summary: List universities.
      tags:
      - universities
  /universities/{id}:
    get:
      description: Show basic university information.
      operationId: show-university
      parameters:
      - description: University id.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.UniversityResponse'
      security:
      - BearerJWT: []
      summary: Show university.
      tags:
      - universities
  /users:
    post:
      description: Create user.
      operationId: create-user
      parameters:
      - description: User that wants to be stored.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/presenter.UserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: ""
      summary: Create user.
      tags:
      - users
  /users-mood:
    post:
      description: Create user's mood for the current day.
      operationId: create-user-mood-for-current-day
      parameters:
      - description: User's mood for the current day.
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/presenter.UserMoodPayload'
      responses:
        "201":
          description: ""
      security:
      - BearerJWT: []
      summary: Create user's mood
      tags:
      - users-mood
  /users-mood/users/{id}:
    get:
      description: Get user's mood given its id for the current day.
      operationId: get-user-mood-by-user-id-for-current-day
      parameters:
      - description: User's id.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.UserMoodResponse'
      security:
      - BearerJWT: []
      summary: Show user's mood
      tags:
      - users-mood
  /users/{id}:
    get:
      description: Show basic user information.
      operationId: get-tiny-user
      parameters:
      - description: User's id.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/presenter.TinyUserResponse'
      security:
      - BearerJWT: []
      summary: Show user.
      tags:
      - users
    patch:
      description: Update user.
      operationId: update-user
      parameters:
      - description: User's id.
        in: path
        name: id
        required: true
        type: string
      - description: User information that wants to be updated.
        in: body
        name: updatePayload
        required: true
        schema:
          $ref: '#/definitions/presenter.UpdateUserPayload'
      responses:
        "200":
          description: ""
      security:
      - BearerJWT: []
      summary: Update user.
      tags:
      - users
  /users/login:
    post:
      description: Log in to the app to consume the data.
      operationId: login
      responses:
        "200":
          description: ""
          headers:
            Access-Control-Allow-Headers:
              description: Authorization.
              type: string
            Authorization:
              description: Bearer jwt that must be used as Api Key in the Authorize
                section.
              type: string
      security:
      - BasicAuth: []
      summary: Login.
      tags:
      - authentication
securityDefinitions:
  BasicAuth:
    type: basic
  BearerJWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
