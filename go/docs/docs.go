// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Jesús 'VoN' Rodríguez",
            "url": "https://www.linkedin.com/in/jes%C3%BAs-%C3%A1ngel-rodr%C3%ADguez-mart%C3%ADnez-84991a1b4/",
            "email": "sudo.von.contact@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/universities": {
            "get": {
                "description": "List basic universities information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "universities"
                ],
                "summary": "List universities.",
                "operationId": "list-universities",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenter.TinyUniversityList"
                        }
                    }
                }
            }
        },
        "/universities/{id}": {
            "get": {
                "security": [
                    {
                        "BearerJWT": []
                    }
                ],
                "description": "Show basic university information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "universities"
                ],
                "summary": "Show university.",
                "operationId": "show-university",
                "parameters": [
                    {
                        "type": "string",
                        "description": "University id.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenter.UniversityResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create user.",
                "operationId": "create-user",
                "parameters": [
                    {
                        "description": "User that wants to be stored.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.UserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/users-mood": {
            "post": {
                "security": [
                    {
                        "BearerJWT": []
                    }
                ],
                "description": "Create user's mood for the current day.",
                "tags": [
                    "users-mood"
                ],
                "summary": "Create user's mood",
                "operationId": "create-user-mood-for-current-day",
                "parameters": [
                    {
                        "description": "User's mood for the current day.",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.UserMoodPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    }
                }
            }
        },
        "/users-mood/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerJWT": []
                    }
                ],
                "description": "Get user's mood given its id for the current day.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users-mood"
                ],
                "summary": "Show user's mood",
                "operationId": "get-user-mood-by-user-id-for-current-day",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's id.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenter.UserMoodResponse"
                        }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Log in to the app to consume the data.",
                "tags": [
                    "authentication"
                ],
                "summary": "Login.",
                "operationId": "login",
                "responses": {
                    "200": {
                        "description": "",
                        "headers": {
                            "Access-Control-Allow-Headers": {
                                "type": "string",
                                "description": "Authorization."
                            },
                            "Authorization": {
                                "type": "string",
                                "description": "Bearer jwt that must be used as Api Key in the Authorize section."
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerJWT": []
                    }
                ],
                "description": "Show basic user information.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Show user.",
                "operationId": "get-tiny-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's id.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/presenter.TinyUserResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerJWT": []
                    }
                ],
                "description": "Update user.",
                "tags": [
                    "users"
                ],
                "summary": "Update user.",
                "operationId": "update-user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User's id.",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User information that wants to be updated.",
                        "name": "updatePayload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.UpdateUserPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "presenter.ClassroomResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "presenter.TinyUniversityList": {
            "type": "object",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.TinyUniversityResponse"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "presenter.TinyUniversityResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "profile_picture": {
                    "type": "string"
                }
            }
        },
        "presenter.TinyUserResponse": {
            "type": "object",
            "properties": {
                "birth_date": {
                    "type": "string",
                    "example": "1997-04-17"
                },
                "email": {
                    "type": "string",
                    "example": "sudo.von.contact@gmail.com"
                },
                "id": {
                    "type": "string",
                    "example": "613aab4d8a6ef50007e622bd"
                },
                "name": {
                    "type": "string",
                    "example": "Sudo Von"
                },
                "registration_number": {
                    "type": "string",
                    "example": "16190770"
                }
            }
        },
        "presenter.UniversityResponse": {
            "type": "object",
            "properties": {
                "classrooms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.ClassroomResponse"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "profile_picture": {
                    "type": "string"
                }
            }
        },
        "presenter.UpdateUserPayload": {
            "type": "object",
            "properties": {
                "birth_date": {
                    "type": "string",
                    "example": "1997-04-17"
                },
                "email": {
                    "type": "string",
                    "example": "sudo.von.contact@gmail.com"
                },
                "name": {
                    "type": "string",
                    "example": "Sudo Von"
                },
                "registration_number": {
                    "type": "string",
                    "example": "16190770"
                }
            }
        },
        "presenter.UserMoodPayload": {
            "type": "object",
            "properties": {
                "mood": {
                    "type": "number",
                    "example": 5
                }
            }
        },
        "presenter.UserMoodResponse": {
            "type": "object",
            "properties": {
                "creation_date": {
                    "type": "string",
                    "example": "2021-04-17"
                },
                "id": {
                    "type": "string",
                    "example": "613aab578a6ef50007e622be"
                },
                "mood": {
                    "type": "number",
                    "example": 10
                },
                "user_id": {
                    "type": "string",
                    "example": "613aab4d8a6ef50007e622bd"
                }
            }
        },
        "presenter.UserPayload": {
            "type": "object",
            "properties": {
                "birth_date": {
                    "type": "string",
                    "example": "1997-04-17"
                },
                "email": {
                    "type": "string",
                    "example": "sudo.von.contact@gmail.com"
                },
                "name": {
                    "type": "string",
                    "example": "Sudo Von"
                },
                "password": {
                    "type": "string",
                    "example": "123456"
                },
                "registration_number": {
                    "type": "string",
                    "example": "16190770"
                },
                "university_id": {
                    "type": "string",
                    "example": "61366c06d3f6379af212aeb5"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "BearerJWT": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "College-app API",
	Description: "Official documentation to consume the API.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
